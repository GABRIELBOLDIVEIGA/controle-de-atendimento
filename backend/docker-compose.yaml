services:
  # database
  postgres:
    container_name: postgres_atendimento
    image: postgres:16
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER_NAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATA_BASE}
      - POSTGRES_DATA_BASE${POSTGRES_DATA_BASE}
    ports:
      - 5432:5432
    expose:
      - 5432
    volumes:
      - postgres_atendimento-datavolume:/var/lib/postgresql/data
    networks:
      - internalnet

  # api
  nestjs:
    container_name: nestjs_atendimento
    build: .
    command: sh -c "npx prisma generate && npm install && npm uninstall bcrypt && npm install bcrypt && npm run start:dev"
    depends_on:
      - postgres
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - JWT_SECRET=${JWT_SECRET}
      
      # - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER_NAME=${POSTGRES_USER_NAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DATA_BASE=${POSTGRES_DATA_BASE}
      - POSTGRES_USER=${POSTGRES_USER_NAME}
      - POSTGRES_SYNCHRONIZE=${POSTGRES_SYNCHRONIZE}
    volumes:
      - nestjs_atendimento-datavolume:/home/node/app
    ports:
      - 3000:3000
    networks:
      - internalnet

# docker configs
networks:
  internalnet:
    driver: bridge
volumes:
  nestjs_atendimento-datavolume:
  postgres_atendimento-datavolume: