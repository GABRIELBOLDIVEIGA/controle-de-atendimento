// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DEV
  ADMIN
  USER
}

model Adress {
  id          Int     @id @default(autoincrement())
  cep         String?
  logradouro  String?
  complemento String?
  bairro      String?
  localidade  String?
  uf          String?
  numero      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()

  customerAdress CustomerAdress[]
  userAddress    UserAddress[]
}

model Occurrence {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt()
  deletedAt DateTime?

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  contact Contact[]

  @@unique([companyId, name])
}

model OtherOccurrence {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt()
  deletedAt DateTime?

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  CustomerContact Contact[]
}

model Company {
  id   Int    @id @default(autoincrement())
  uuid String @unique() @default(uuid())
  name String @unique()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt()
  deletedAt DateTime?

  userCompany     UserCompany[]
  occurrence      Occurrence[]
  otherOccurrence OtherOccurrence[]
  schedule        Schedule[]
  customerCompany CustomerCompany[]
  Contact         Contact[]
}

model Schedule {
  id Int @id @default(autoincrement())

  time_preference DateTime? @db.Time(4)
  next_return     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @unique()
}

model Contact {
  id Int @id @default(autoincrement())

  start DateTime
  end   DateTime

  comments String?

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  occurrence   Occurrence @relation(fields: [occurrenceId], references: [id])
  occurrenceId Int

  otherOccurrence   OtherOccurrence? @relation(fields: [otherOccurrenceId], references: [id])
  otherOccurrenceId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

// User
model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt()
  deletedAt DateTime?

  role Role @default(USER)

  userCompany     UserCompany[]
  customerUser    CustomerUser[]
  userAddress     UserAddress[]
  customerContact Contact[]
}

model UserAddress {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  address   Adress @relation(fields: [addressId], references: [id])
  addressId Int

  @@unique([userId, addressId])
  @@unique([addressId])
}

model UserCompany {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int
}

// Customer
model Customer {
  id            Int       @id @default(autoincrement())
  name          String
  email         String?
  phone1        String?
  phone2        String?
  phone3        String?
  origin        String?
  person        String?
  competitor    String?
  comments      String?
  first_contact DateTime?
  last_contact  DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt()
  deletedAt DateTime?

  customerUser    CustomerUser[]
  customerAdress  CustomerAdress[]
  Schedule        Schedule[]
  customerCompany CustomerCompany[]
  customerContact Contact[]
}

model CustomerCompany {
  id Int @id @default(autoincrement())

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int
}

model CustomerAdress {
  id Int @id @default(autoincrement())

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int

  address   Adress @relation(fields: [addressId], references: [id])
  addressId Int

  @@unique([customerId, addressId])
  @@unique([addressId])
}

model CustomerUser {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  @@index([customerId])
  @@index([userId])
}
