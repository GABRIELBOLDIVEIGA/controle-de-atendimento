services:
  db:
    container_name: db
    restart: always
    image: mysql:8.0
    env_file:
      - backend/.env
    environment:
      - host=${MYSQL_HOST}
      - port=${MYSQL_PORT}
      - database=${MYSQL_DATA_BASE}
      - username=${MYSQL_USER_NAME}
      - password=${MYSQL_PASSWORD}
      - MYSQL_ALLOW_EMPTY_PASSWORD=true
      - MYSQL_DATABASE=${MYSQL_DATA_BASE}
      - MYSQL_SYNCHRONIZE=${MYSQL_SYNCHRONIZE}
    networks:
      - db-network
    volumes:
    #   - ./init-db/init.sql:/docker-entrypoint-initdb.d/0_init.sql
      - db-datavolume:/var/lib/mysql
    ports:
      - 3306:3306
    expose:
      - 3306

  frontend:
    build:
      context: frontend
    container_name: frontend
    ports:
      - "80:80"

  backend:
    build:
      args:
      - NODE_ENV=development
      context: backend
      target: development
    depends_on:
      - db
    command: npm run start:dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL="mysql://root:@localhost:3306/atendimento"
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_USER_NAME=${MYSQL_USER_NAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATA_BASE=${MYSQL_DATA_BASE}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - 3000:3000
      - 9229:9229
      - 9230:9230
    # secrets:
    #   - db-password
    # volumes:
    #   - ./backend/src:/code/src:ro
    #   - ./backend/package.json:/code/package.json
    #   - ./backend/package-lock.json:/code/package-lock.json
    #   - back-notused:/opt/app/node_modules
    # networks:
    #   - public
    #   - private
    
volumes:
  db-datavolume:
networks:
  # internalnet:
  public:
  private:
  db-network: